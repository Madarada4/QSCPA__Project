// VerilogA for Project_Adar, decoder_adar, veriloga

`include "constants.vams"
`include "disciplines.vams"

module decoder_adar(dout, clk_in, din);
output [255:0] dout;
electrical [255:0] dout;
input clk_in;
electrical clk_in;
input [7:0] din;
electrical [7:0] din;

parameter real trise = 0 from [0:inf);
parameter real tfall = 0 from [0:inf);
parameter real tdel = 0 from [0:inf);
parameter real vlogic_high = 1.2;
parameter real vlogic_low = 0;
parameter real vtrans_clk = 0.6;

real vout[255:0];
real polarity;
genvar input_bit_index;
integer j;
integer i;
genvar k;

`define INPUT_BITS	8
`define OUTPUT_BITS	255

analog begin
	 @(cross(V(clk_in) - vtrans_clk, 1)) begin
		i = 0;
		for (input_bit_index = 0; input_bit_index < `INPUT_BITS ; input_bit_index = input_bit_index + 1) begin

			if(V(din[input_bit_index]) > vtrans_clk) begin
				polarity = vlogic_high;
			end else begin
				polarity = vlogic_low;
			end

           	for(j = i; j < i + 2 ** input_bit_index; j = j + 1) begin
				vout[j] = polarity;
	     	end
			i = i + 2 ** input_bit_index;
         end
	 end

	for( k = 0; k <= `OUTPUT_BITS; k = k + 1) begin
		V(dout[k]) <+ transition( vout[k], tdel, trise, tfall );
	end

`undef INPUT_BITS
`undef OUTPUT_BITS
end
endmodule
